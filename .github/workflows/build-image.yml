name: Build, test and publish

on:
  push:
    branches: [ "**" ]
    tags: [ "v*.*.*" ]

jobs:
  build-and-push-image:
    name: Build Docker image and push to repositories
    strategy:
      matrix:
        go-version: ["1.17"]
        os: ["ubuntu-latest"]
        platform: ["linux/amd64"]
    runs-on: ${{ matrix.os }}
    outputs:
      build-metadata: ${{ steps.docker-build.outputs.metadata }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}
      - name: Cache between builds
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-${{ matrix.go-version }}-
      - name: Build
        run: make envars-webhook
      - name: Docker tags
        id: docker-tags
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/danfromtitan/envars-from-node-labels
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'develop') }}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix=${{ github.ref_name }}-
      - name: Set up Docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build image and push to GitHub Container Registry
        id: docker-build
        uses: docker/build-push-action@v3
        with:
          context: ./
          platforms: ${{ matrix.platform }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker-tags.outputs.tags }}
          labels: ${{ steps.docker-tags.outputs.labels }}
      - name: Image name and digest
        run: |
          echo '${{ steps.docker-build.outputs.metadata }}' | jq -r '."image.name"'
          echo ${{ steps.docker-build.outputs.digest }}

  test-webhook:
    name: Test webhook
    strategy:
      matrix:
        os: ["ubuntu-latest"]
        container-runtime: ["containerd"]
    runs-on: ${{ matrix.os }}
    needs:
      - build-and-push-image
    steps:
    - name: Setup minikube
      uses: medyagh/setup-minikube@master
      id: minikube
      with:
        minikube-version: 1.23.0
        driver: docker
        container-runtime: ${{ matrix.container-runtime }}
        kubernetes-version: v1.22.10
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Deploy webhook
      run: |
        curl -s https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
        cd charts/envars-webhook
        NAMESPACE=webtest
        IMAGE_TAG=$(echo '${{ needs.build-and-push-image.outputs.build-metadata }}' | jq -r '."image.name" | split(",")[-1] | split(":")[-1]')
        helm install -n $NAMESPACE --create-namespace envars-webhook . -f values.yaml --set image.tag="$IMAGE_TAG"
        until kubectl get pods -n $NAMESPACE | grep Running > /dev/null; do
          kubectl get pods -n $NAMESPACE | tail -n +2
          sleep 1
        done
    - name: Verify webhook
      run: |
        make sample
        kubectl apply -f samples/pod-allowed.yaml
        kubectl logs -n samples pod-allowed